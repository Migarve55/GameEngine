#version 400

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 lightDirection = -unitLightVector;
	vec3 lightReflectionVector = reflect(lightDirection,unitNormal);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float lrvDotcv = dot(lightReflectionVector,unitVectorToCamera);
	
	float brightness = max(nDotl,0.2);
	float specularK = max(lrvDotcv,0.0);
	float dampedK = pow(specularK,shineDamper);
	vec3 finalSpecular = reflectivity * dampedK * lightColour;
	
	vec3 diffuse = brightness * lightColour;

	out_Color = vec4(diffuse,1.0) * texture(modelTexture,pass_textureCoordinates) + vec4(finalSpecular,1.0);

}